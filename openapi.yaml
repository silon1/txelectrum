openapi: 3.1.0
x-stoplight:
  id: ou7gl61whyceb
info:
  title: SECP256K1 Signer
  version: '1.0'
  license:
    name: Apache 2.0
    identifier: Apache-2.0
  description: >
    SECP256K1 Signer allows clients to create a bitcoin wallet on
    a remote server, and requst the server to sign bitcoin transactions. The
    algorithm used to creating wallets and signing transactions is [ECDSA
    secp256k1](https://en.bitcoin.it/wiki/Secp256k1). Therefore, the server
    provides the following functionality:


    1. Request the server to create a seckp256k1 key pair protected with a
    password.

    2. Receive the public key of the key pair from the server.

    3. Send a hashed buffer to sign with the private key.

    4. Receive the digital signature of the hashed buffer.
  summary: 'This API allows you to create a bitcoin wallet '
servers:
  - url: 'http://localhost:51841'
paths:
  /create_keypair:
    post:
      summary: Create key pair
      operationId: post-create_keypair
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  public_key:
                    $ref: '#/components/schemas/public_key'
                required:
                  - public_key
              examples:
                example-1:
                  value:
                    public_key: >-
                      02f2dd109034c408433042ab0d237436ec62b5475ad87121ab607503c7d67d0895
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hashed_password:
                  $ref: '#/components/schemas/sha1'
              required:
                - hashed_password
            examples:
              example-1:
                value:
                  hashed_password: 9f447054819975f30a80e593961d850788edf9b4
        description: ''
      description: >-
        Requests the server to create secp256k1 key pair. The key pair will be
        protected by a password given in the request's body. The password must
        be hashed with SHA-1. The server must return one of the following
        responses:

        * 200 - If the server successfuly created the key pair. The response
        must contain the public key.

        * 400 - If the request didn't contain a hashed password.

        * 500 - If the server couldn't create the key pair because of an
        internal error.
  /sign_buffer:
    post:
      summary: Sign a buffer
      operationId: post-sign_buffer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    $ref: '#/components/schemas/digital_signature'
                required:
                  - signature
              examples:
                example-1:
                  value:
                    signature: >-
                      3046022100b1b2c7dec2d9dab9b09873b0b8cc8853cfd63e9243ca98e13590425d75e4b1ac022100f276aab798ad35b05a45972c9cc8d6192f764024e76e29d6b8cf8bcd5475ccb3
        '400':
          description: Bad Request
        '401':
          description: The password is wrong.
        '404':
          description: The private key is missing.
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                public_key:
                  $ref: '#/components/schemas/public_key'
                hashed_password:
                  $ref: '#/components/schemas/sha1'
                hashed_buffer:
                  $ref: '#/components/schemas/sha256'
              required:
                - public_key
                - hashed_password
                - hashed_buffer
            examples:
              example-1:
                value:
                  public_key: >-
                    02f2dd109034c408433042ab0d237436ec62b5475ad87121ab607503c7d67d0895
                  hashed_password: 9f447054819975f30a80e593961d850788edf9b4
                  hashed_buffer: >-
                    315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3
        description: ''
      description: >-
        Requests the server to digitally sign on a buffer. The client must send
        all the following parameters in the request's body in JSON format:

        * The public key that pairs to the private key the server need to use.

        * The hashed password (using SHA-1).

        * The buffer to digitally sign, must be hashed with SHA-256.

        The The server must return one of the following responses:

        * 200 - If the server successfuly signed the given buffer. The response
        must contain the digital signature.

        * 400 - If the request's body didn't contain one of the paramters in the
        previous list.

        * 401 - If the given password doesn't match the password of the
        requested key pair to use.

        * 404 - If the public key doesn't pair to any private key in the server.

        * 500 - If the server couldn't sign the buffer because of an internal
        error.
components:
  schemas:
    sha1:
      type: string
      title: sha1
      x-stoplight:
        id: 4pf1wx4w7lhil
      format: binary
      example: 9f447054819975f30a80e593961d850788edf9b4
      pattern: '^[A-Fa-f0-9]{40}'
      minLength: 40
      maxLength: 40
    sha256:
      type: string
      title: sha256
      x-stoplight:
        id: 4pf1wx4w7lhil
      format: binary
      example: 315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3
      pattern: '^[A-Fa-f0-9]{64}'
      minLength: 64
      maxLength: 64
      examples:
        - 315f5bdb76d078c43b8ac0064e4a0164612b1fce77c869345bfc94c75894edd3
    public_key:
      type: string
      title: public_key
      x-stoplight:
        id: nfnni5oyjc04c
      format: binary
      example: 02f2dd109034c408433042ab0d237436ec62b5475ad87121ab607503c7d67d0895
      pattern: '^[A-Fa-f0-9]{66}'
      examples:
        - 02f2dd109034c408433042ab0d237436ec62b5475ad87121ab607503c7d67d0895
      minLength: 66
      maxLength: 66
      description: >-
        Representation of secp256k1 public key in [SEC's
        compressed](https://bitcoin.stackexchange.com/a/92683) format.
    digital_signature:
      type: string
      title: digital_signature
      x-stoplight:
        id: nfnni5oyjc04c
      format: binary
      example: >-
        3045022100f8a4dbab9c9fed17dfe75db206c2c070f86ae8537b87a221906bf6c981dd1259022074fda0ebb42393cecf7dcd0217d64bc7089306aab19c0efda4c0a965b1a6ceb5
      pattern: '^[A-Fa-f0-9]*'
      examples:
        - >-
          3045022100f8a4dbab9c9fed17dfe75db206c2c070f86ae8537b87a221906bf6c981dd1259022074fda0ebb42393cecf7dcd0217d64bc7089306aab19c0efda4c0a965b1a6ceb5
      description: >-
        Representation of secp256k1 digital signature using SHA-256, and in
        [DER](https://bitcoin.stackexchange.com/a/92683) format.
  securitySchemes: {}
  responses: {}
